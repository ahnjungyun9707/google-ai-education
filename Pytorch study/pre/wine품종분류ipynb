{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN1caRa2ytH0Lep0ZNMgifG"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":68,"metadata":{"id":"yBNIX-hMu9eh","executionInfo":{"status":"ok","timestamp":1726827503376,"user_tz":-540,"elapsed":493,"user":{"displayName":"박희진","userId":"04727579243057026808"}}},"outputs":[],"source":["import torch\n","from torch.autograd import Variable\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torch.utils.data import DataLoader, TensorDataset\n","\n","from sklearn.datasets import load_wine\n","from sklearn.model_selection import train_test_split\n","\n","import pandas as pd"]},{"cell_type":"code","source":["wine = load_wine()\n","\n","print(wine.data.shape)\n","print(wine.target.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z9r62HaUvLOI","executionInfo":{"status":"ok","timestamp":1726827635238,"user_tz":-540,"elapsed":525,"user":{"displayName":"박희진","userId":"04727579243057026808"}},"outputId":"6b7e039f-10bb-494f-e76d-662ff1bd1687"},"execution_count":83,"outputs":[{"output_type":"stream","name":"stdout","text":["(178, 13)\n","(178,)\n"]}]},{"cell_type":"code","source":["pd.DataFrame(wine.data, columns=wine.feature_names)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":443},"id":"hXilzoRExZOc","executionInfo":{"status":"ok","timestamp":1726827636193,"user_tz":-540,"elapsed":6,"user":{"displayName":"박희진","userId":"04727579243057026808"}},"outputId":"219d6528-dd87-410f-e7b2-3e01a20b0b13"},"execution_count":84,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     alcohol  malic_acid   ash  alcalinity_of_ash  magnesium  total_phenols  \\\n","0      14.23        1.71  2.43               15.6      127.0           2.80   \n","1      13.20        1.78  2.14               11.2      100.0           2.65   \n","2      13.16        2.36  2.67               18.6      101.0           2.80   \n","3      14.37        1.95  2.50               16.8      113.0           3.85   \n","4      13.24        2.59  2.87               21.0      118.0           2.80   \n","..       ...         ...   ...                ...        ...            ...   \n","173    13.71        5.65  2.45               20.5       95.0           1.68   \n","174    13.40        3.91  2.48               23.0      102.0           1.80   \n","175    13.27        4.28  2.26               20.0      120.0           1.59   \n","176    13.17        2.59  2.37               20.0      120.0           1.65   \n","177    14.13        4.10  2.74               24.5       96.0           2.05   \n","\n","     flavanoids  nonflavanoid_phenols  proanthocyanins  color_intensity   hue  \\\n","0          3.06                  0.28             2.29             5.64  1.04   \n","1          2.76                  0.26             1.28             4.38  1.05   \n","2          3.24                  0.30             2.81             5.68  1.03   \n","3          3.49                  0.24             2.18             7.80  0.86   \n","4          2.69                  0.39             1.82             4.32  1.04   \n","..          ...                   ...              ...              ...   ...   \n","173        0.61                  0.52             1.06             7.70  0.64   \n","174        0.75                  0.43             1.41             7.30  0.70   \n","175        0.69                  0.43             1.35            10.20  0.59   \n","176        0.68                  0.53             1.46             9.30  0.60   \n","177        0.76                  0.56             1.35             9.20  0.61   \n","\n","     od280/od315_of_diluted_wines  proline  \n","0                            3.92   1065.0  \n","1                            3.40   1050.0  \n","2                            3.17   1185.0  \n","3                            3.45   1480.0  \n","4                            2.93    735.0  \n","..                            ...      ...  \n","173                          1.74    740.0  \n","174                          1.56    750.0  \n","175                          1.56    835.0  \n","176                          1.62    840.0  \n","177                          1.60    560.0  \n","\n","[178 rows x 13 columns]"],"text/html":["\n","  <div id=\"df-829cca39-4818-4587-b643-a0e9eeebe3a8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>alcohol</th>\n","      <th>malic_acid</th>\n","      <th>ash</th>\n","      <th>alcalinity_of_ash</th>\n","      <th>magnesium</th>\n","      <th>total_phenols</th>\n","      <th>flavanoids</th>\n","      <th>nonflavanoid_phenols</th>\n","      <th>proanthocyanins</th>\n","      <th>color_intensity</th>\n","      <th>hue</th>\n","      <th>od280/od315_of_diluted_wines</th>\n","      <th>proline</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>14.23</td>\n","      <td>1.71</td>\n","      <td>2.43</td>\n","      <td>15.6</td>\n","      <td>127.0</td>\n","      <td>2.80</td>\n","      <td>3.06</td>\n","      <td>0.28</td>\n","      <td>2.29</td>\n","      <td>5.64</td>\n","      <td>1.04</td>\n","      <td>3.92</td>\n","      <td>1065.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>13.20</td>\n","      <td>1.78</td>\n","      <td>2.14</td>\n","      <td>11.2</td>\n","      <td>100.0</td>\n","      <td>2.65</td>\n","      <td>2.76</td>\n","      <td>0.26</td>\n","      <td>1.28</td>\n","      <td>4.38</td>\n","      <td>1.05</td>\n","      <td>3.40</td>\n","      <td>1050.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>13.16</td>\n","      <td>2.36</td>\n","      <td>2.67</td>\n","      <td>18.6</td>\n","      <td>101.0</td>\n","      <td>2.80</td>\n","      <td>3.24</td>\n","      <td>0.30</td>\n","      <td>2.81</td>\n","      <td>5.68</td>\n","      <td>1.03</td>\n","      <td>3.17</td>\n","      <td>1185.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>14.37</td>\n","      <td>1.95</td>\n","      <td>2.50</td>\n","      <td>16.8</td>\n","      <td>113.0</td>\n","      <td>3.85</td>\n","      <td>3.49</td>\n","      <td>0.24</td>\n","      <td>2.18</td>\n","      <td>7.80</td>\n","      <td>0.86</td>\n","      <td>3.45</td>\n","      <td>1480.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>13.24</td>\n","      <td>2.59</td>\n","      <td>2.87</td>\n","      <td>21.0</td>\n","      <td>118.0</td>\n","      <td>2.80</td>\n","      <td>2.69</td>\n","      <td>0.39</td>\n","      <td>1.82</td>\n","      <td>4.32</td>\n","      <td>1.04</td>\n","      <td>2.93</td>\n","      <td>735.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>173</th>\n","      <td>13.71</td>\n","      <td>5.65</td>\n","      <td>2.45</td>\n","      <td>20.5</td>\n","      <td>95.0</td>\n","      <td>1.68</td>\n","      <td>0.61</td>\n","      <td>0.52</td>\n","      <td>1.06</td>\n","      <td>7.70</td>\n","      <td>0.64</td>\n","      <td>1.74</td>\n","      <td>740.0</td>\n","    </tr>\n","    <tr>\n","      <th>174</th>\n","      <td>13.40</td>\n","      <td>3.91</td>\n","      <td>2.48</td>\n","      <td>23.0</td>\n","      <td>102.0</td>\n","      <td>1.80</td>\n","      <td>0.75</td>\n","      <td>0.43</td>\n","      <td>1.41</td>\n","      <td>7.30</td>\n","      <td>0.70</td>\n","      <td>1.56</td>\n","      <td>750.0</td>\n","    </tr>\n","    <tr>\n","      <th>175</th>\n","      <td>13.27</td>\n","      <td>4.28</td>\n","      <td>2.26</td>\n","      <td>20.0</td>\n","      <td>120.0</td>\n","      <td>1.59</td>\n","      <td>0.69</td>\n","      <td>0.43</td>\n","      <td>1.35</td>\n","      <td>10.20</td>\n","      <td>0.59</td>\n","      <td>1.56</td>\n","      <td>835.0</td>\n","    </tr>\n","    <tr>\n","      <th>176</th>\n","      <td>13.17</td>\n","      <td>2.59</td>\n","      <td>2.37</td>\n","      <td>20.0</td>\n","      <td>120.0</td>\n","      <td>1.65</td>\n","      <td>0.68</td>\n","      <td>0.53</td>\n","      <td>1.46</td>\n","      <td>9.30</td>\n","      <td>0.60</td>\n","      <td>1.62</td>\n","      <td>840.0</td>\n","    </tr>\n","    <tr>\n","      <th>177</th>\n","      <td>14.13</td>\n","      <td>4.10</td>\n","      <td>2.74</td>\n","      <td>24.5</td>\n","      <td>96.0</td>\n","      <td>2.05</td>\n","      <td>0.76</td>\n","      <td>0.56</td>\n","      <td>1.35</td>\n","      <td>9.20</td>\n","      <td>0.61</td>\n","      <td>1.60</td>\n","      <td>560.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>178 rows × 13 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-829cca39-4818-4587-b643-a0e9eeebe3a8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-829cca39-4818-4587-b643-a0e9eeebe3a8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-829cca39-4818-4587-b643-a0e9eeebe3a8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7f5b4405-c8c6-4e13-ba99-c6da1c407550\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7f5b4405-c8c6-4e13-ba99-c6da1c407550')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7f5b4405-c8c6-4e13-ba99-c6da1c407550 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"pd\",\n  \"rows\": 178,\n  \"fields\": [\n    {\n      \"column\": \"alcohol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8118265380058575,\n        \"min\": 11.03,\n        \"max\": 14.83,\n        \"num_unique_values\": 126,\n        \"samples\": [\n          11.62,\n          13.64,\n          13.69\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"malic_acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1171460976144627,\n        \"min\": 0.74,\n        \"max\": 5.8,\n        \"num_unique_values\": 133,\n        \"samples\": [\n          1.21,\n          2.83,\n          1.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ash\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.27434400906081485,\n        \"min\": 1.36,\n        \"max\": 3.23,\n        \"num_unique_values\": 79,\n        \"samples\": [\n          2.31,\n          2.43,\n          2.52\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alcalinity_of_ash\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.339563767173505,\n        \"min\": 10.6,\n        \"max\": 30.0,\n        \"num_unique_values\": 63,\n        \"samples\": [\n          25.5,\n          28.5,\n          15.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"magnesium\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.282483515295665,\n        \"min\": 70.0,\n        \"max\": 162.0,\n        \"num_unique_values\": 53,\n        \"samples\": [\n          126.0,\n          85.0,\n          162.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_phenols\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6258510488339893,\n        \"min\": 0.98,\n        \"max\": 3.88,\n        \"num_unique_values\": 97,\n        \"samples\": [\n          1.68,\n          2.11,\n          1.35\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"flavanoids\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9988586850169467,\n        \"min\": 0.34,\n        \"max\": 5.08,\n        \"num_unique_values\": 132,\n        \"samples\": [\n          3.18,\n          2.5,\n          3.17\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nonflavanoid_phenols\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12445334029667937,\n        \"min\": 0.13,\n        \"max\": 0.66,\n        \"num_unique_values\": 39,\n        \"samples\": [\n          0.58,\n          0.41,\n          0.39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"proanthocyanins\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5723588626747613,\n        \"min\": 0.41,\n        \"max\": 3.58,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          0.75,\n          1.77,\n          1.42\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"color_intensity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.318285871822413,\n        \"min\": 1.28,\n        \"max\": 13.0,\n        \"num_unique_values\": 132,\n        \"samples\": [\n          2.95,\n          3.3,\n          5.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.22857156582982338,\n        \"min\": 0.48,\n        \"max\": 1.71,\n        \"num_unique_values\": 78,\n        \"samples\": [\n          1.22,\n          1.04,\n          1.45\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"od280/od315_of_diluted_wines\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7099904287650504,\n        \"min\": 1.27,\n        \"max\": 4.0,\n        \"num_unique_values\": 122,\n        \"samples\": [\n          4.0,\n          1.82,\n          1.59\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"proline\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.9074742768491,\n        \"min\": 278.0,\n        \"max\": 1680.0,\n        \"num_unique_values\": 121,\n        \"samples\": [\n          1375.0,\n          1270.0,\n          735.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":84}]},{"cell_type":"code","source":["total_y"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wRq7Yjvi8NYX","executionInfo":{"status":"ok","timestamp":1726827984644,"user_tz":-540,"elapsed":403,"user":{"displayName":"박희진","userId":"04727579243057026808"}},"outputId":"239c25fd-2add-4bb0-bdca-0f813f582ffc"},"execution_count":109,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2,\n","       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n","       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n","       2, 2])"]},"metadata":{},"execution_count":109}]},{"cell_type":"code","source":["total_x = wine.data\n","total_y = wine.target"],"metadata":{"id":"NHFvDHf6yCKw","executionInfo":{"status":"ok","timestamp":1726827982536,"user_tz":-540,"elapsed":370,"user":{"displayName":"박희진","userId":"04727579243057026808"}}},"execution_count":108,"outputs":[]},{"cell_type":"code","source":["train_x, test_x, train_y, test_y = train_test_split(total_x, total_y, test_size=0.2, stratify=total_y)\n","train_x.shape, test_x.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dxE5bFe7wjPj","executionInfo":{"status":"ok","timestamp":1726827997747,"user_tz":-540,"elapsed":352,"user":{"displayName":"박희진","userId":"04727579243057026808"}},"outputId":"16664771-dda0-4baa-c194-47a2732f5133"},"execution_count":110,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((142, 13), (36, 13))"]},"metadata":{},"execution_count":110}]},{"cell_type":"code","source":["# train_y의 value_counts\n","pd.Series(train_y).value_counts().plot(kind='bar', color='skyblue')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":443},"id":"WPiUay-LzDJy","executionInfo":{"status":"ok","timestamp":1726827999894,"user_tz":-540,"elapsed":726,"user":{"displayName":"박희진","userId":"04727579243057026808"}},"outputId":"db87cdb2-1261-4a28-b33f-3e1c4edf23e8"},"execution_count":111,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":111},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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r3+Nq6++Ovbu3RslJSVx6aWXxrZt22LOnDkR8Z/7kM2dO9f/J08yH7uMI7/4xS/ec/vf//73pEngP7G7ZcuWY96duqSkJFavXh0XXXTRKEzGRHbXXXfFBRdcELt37479+/fHqlWr4pJLLoknnngi5s+fP9rjTRjiYxy57rrroqSkJN7rZNaxfhDAyVBVVRXPPfdc1NTUHHP7c88955YLpHvmmWfit7/9bcyePTtmz54dO3bsiNtvvz0uu+yy+P3vfx9nnHHGaI84IYiPcWTOnDmxfv36uPbaa4+5/YUXXoja2trkqZio7rzzzrj11lujs7MzrrrqquHQ6O3tjba2tnjwwQfjBz/4wShPyUTz1ltvRWnp//vRV1JSEhs2bIg77rgjrrjiiti6desoTjdxiI9xpLa2Njo7O981Pt7vrAgUU2NjY8yePTvWrl0b69evH/4M/bTTTova2trYsmVLfPGLXxzlKZlo3rnQecGCBSPW/+hHP4qIiC984QujMdaE44LTceSpp56KgYGB+NznPnfM7QMDA7F79+644oorkidjojt8+HDs27cvIiJmz54dkydPHuWJmKhaWlriqaeeil/96lfH3H777bfHxo0b48iRI8mTTSziAwBI5fd8AACpxAcAkEp8AACpxAcAkEp8AACpxAcAkEp8AACpxAcAkOr/AKo2BfX+xnV+AAAAAElFTkSuQmCC\n"},"metadata":{}}]},{"cell_type":"code","source":["pd.Series(test_y).value_counts().plot(kind='bar', color='skyblue')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":443},"id":"vclXoG37zDME","executionInfo":{"status":"ok","timestamp":1726828001261,"user_tz":-540,"elapsed":7,"user":{"displayName":"박희진","userId":"04727579243057026808"}},"outputId":"5aab2a97-586c-4b00-c793-0208066e8ad3"},"execution_count":112,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":112},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# 다층 퍼셉트론 활용(히든레이어 1개)"],"metadata":{"id":"ZR-snMVbDesl"}},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","from torch.utils.data import DataLoader, TensorDataset, random_split\n","from sklearn.datasets import load_wine\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","import numpy as np\n","\n","# 1. 데이터 로드 및 전처리\n","wine = load_wine()\n","X = wine['data']\n","y = wine['target']\n","\n","# 데이터 표준화 (Standardization)\n","scaler = StandardScaler()\n","X = scaler.fit_transform(X)\n","\n","# train, test split (train: 80%, test: 20%)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n","\n","# Tensor로 변환\n","X_train_tensor = torch.tensor(X_train, dtype=torch.float32)\n","y_train_tensor = torch.tensor(y_train, dtype=torch.long)\n","\n","X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n","y_test_tensor = torch.tensor(y_test, dtype=torch.long)\n","\n","# TensorDataset 생성\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","test_dataset = TensorDataset(X_test_tensor, y_test_tensor)\n","\n","# DataLoader 생성\n","train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)\n","test_loader = DataLoader(test_dataset, batch_size=16, shuffle=False)\n","\n","# 2. 모델 정의\n","class WineClassifier(nn.Module):\n","    def __init__(self):\n","        super(WineClassifier, self).__init__()\n","        self.fc1 = nn.Linear(13, 50)  # 입력 차원은 13 (특성 수)\n","        self.fc2 = nn.Linear(50, 3)   # 출력 차원은 3 (클래스 수)\n","\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = self.fc2(x)  # CrossEntropyLoss는 logits을 받음\n","        return x\n","\n","# 3. 모델, 손실 함수, 옵티마이저 설정\n","model = WineClassifier()\n","criterion = nn.CrossEntropyLoss()  # 분류 문제이므로 CrossEntropyLoss 사용\n","optimizer = optim.Adam(model.parameters(), lr=0.01)\n","\n","# 4. 모델 학습\n","epochs = 100\n","for epoch in range(epochs):\n","    model.train()\n","    running_loss = 0.0\n","    for x_batch, y_batch in train_loader:\n","        optimizer.zero_grad()\n","        y_pred = model(x_batch)\n","        loss = criterion(y_pred, y_batch)\n","        loss.backward()\n","        optimizer.step()\n","        running_loss += loss.item()\n","\n","    if (epoch+1) % 10 == 0:\n","        print(f'Epoch [{epoch+1}/{epochs}], Loss: {running_loss/len(train_loader):.4f}')\n","\n","# 5. 모델 평가\n","model.eval()\n","correct = 0\n","total = 0\n","with torch.no_grad():  # 평가 시에는 gradient를 계산하지 않음\n","    for x_batch, y_batch in test_loader:\n","        y_pred = model(x_batch)\n","        _, predicted = torch.max(y_pred, 1)\n","        total += y_batch.size(0)\n","        correct += (predicted == y_batch).sum().item()\n","\n","accuracy = correct / total\n","print(f'Test Accuracy: {accuracy:.4f}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"duN-Ipas3N45","executionInfo":{"status":"ok","timestamp":1726827867497,"user_tz":-540,"elapsed":3414,"user":{"displayName":"박희진","userId":"04727579243057026808"}},"outputId":"45bcc3fc-5e2b-40c7-b99e-44de3af0197b"},"execution_count":105,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch [10/100], Loss: 0.0031\n","Epoch [20/100], Loss: 0.0010\n","Epoch [30/100], Loss: 0.0005\n","Epoch [40/100], Loss: 0.0003\n","Epoch [50/100], Loss: 0.0002\n","Epoch [60/100], Loss: 0.0002\n","Epoch [70/100], Loss: 0.0001\n","Epoch [80/100], Loss: 0.0001\n","Epoch [90/100], Loss: 0.0001\n","Epoch [100/100], Loss: 0.0001\n","Test Accuracy: 0.9722\n"]}]},{"cell_type":"markdown","source":["# **다층 퍼셉트론 사용(히든레이어 6개)**"],"metadata":{"id":"RJnEZo_5DT5r"}},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","from torch.utils.data import DataLoader, TensorDataset\n","from sklearn.datasets import load_wine\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","import numpy as np\n","\n","# 1. 데이터 로드 및 전처리\n","wine = load_wine()\n","X = wine['data']\n","y = wine['target']\n","\n","# 데이터 표준화 (Standardization)\n","scaler = StandardScaler()\n","X = scaler.fit_transform(X)\n","\n","# train, test split (train: 80%, test: 20%)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n","\n","# Tensor로 변환\n","X_train_tensor = torch.tensor(X_train, dtype=torch.float32)\n","y_train_tensor = torch.tensor(y_train, dtype=torch.long)\n","\n","X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n","y_test_tensor = torch.tensor(y_test, dtype=torch.long)\n","\n","# TensorDataset 생성\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","test_dataset = TensorDataset(X_test_tensor, y_test_tensor)\n","\n","# DataLoader 생성\n","train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)\n","test_loader = DataLoader(test_dataset, batch_size=36, shuffle=False)"],"metadata":{"id":"iCns7e5GCiOF","executionInfo":{"status":"ok","timestamp":1726829261777,"user_tz":-540,"elapsed":424,"user":{"displayName":"박희진","userId":"04727579243057026808"}}},"execution_count":127,"outputs":[]},{"cell_type":"code","source":["# 2. 모델 정의 (6개의 히든 레이어)\n","class WineClassifier(nn.Module):\n","    def __init__(self):\n","        super(WineClassifier, self).__init__()\n","        self.fc1 = nn.Linear(13, 64)  # 입력 차원은 13\n","        self.fc2 = nn.Linear(64, 128)  # 첫 번째 히든 레이어\n","        self.fc3 = nn.Linear(128, 64)  # 두 번째 히든 레이어\n","        self.fc4 = nn.Linear(64, 32)   # 세 번째 히든 레이어\n","        self.fc5 = nn.Linear(32, 16)   # 네 번째 히든 레이어\n","        self.fc6 = nn.Linear(16, 8)    # 다섯 번째 히든 레이어\n","        self.out = nn.Linear(8, 3)     # 출력 레이어 (3개의 클래스)\n","\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = F.relu(self.fc3(x))\n","        x = F.relu(self.fc4(x))\n","        x = F.relu(self.fc5(x))\n","        x = F.relu(self.fc6(x))\n","        x = self.out(x)  # CrossEntropyLoss는 logits을 받음\n","        return x"],"metadata":{"id":"KaUF8fLKCmzT","executionInfo":{"status":"ok","timestamp":1726829263313,"user_tz":-540,"elapsed":420,"user":{"displayName":"박희진","userId":"04727579243057026808"}}},"execution_count":128,"outputs":[]},{"cell_type":"code","source":["# 3. 모델, 손실 함수, 옵티마이저 설정\n","model = WineClassifier()\n","criterion = nn.CrossEntropyLoss()  # 분류 문제이므로 CrossEntropyLoss 사용\n","optimizer = optim.Adam(model.parameters(), lr=0.01)\n","\n","# 4. 모델 학습\n","epochs = 100\n","for epoch in range(epochs):\n","    model.train()\n","    running_loss = 0.0\n","    for x_batch, y_batch in train_loader:\n","        optimizer.zero_grad()\n","        y_pred = model(x_batch)\n","        loss = criterion(y_pred, y_batch)\n","        loss.backward()\n","        optimizer.step()\n","        running_loss += loss.item()\n","\n","    if (epoch+1) % 10 == 0:\n","        print(f'Epoch [{epoch+1}/{epochs}], Loss: {running_loss/len(train_loader):.4f}')\n","\n","# 5. 모델 평가\n","model.eval()\n","correct = 0\n","total = 0\n","with torch.no_grad():  # 평가 시에는 gradient를 계산하지 않음\n","    for x_batch, y_batch in test_loader:\n","        y_pred = model(x_batch)\n","        _, predicted = torch.max(y_pred, 1)\n","        total += y_batch.size(0)\n","        correct += (predicted == y_batch).sum().item()\n","\n","accuracy = correct / total\n","print(f'Test Accuracy: {accuracy:.4f}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xsJGrg029h4c","executionInfo":{"status":"ok","timestamp":1726829638340,"user_tz":-540,"elapsed":3507,"user":{"displayName":"박희진","userId":"04727579243057026808"}},"outputId":"158bad7c-88ac-4a53-bf6c-f1b372a019f3"},"execution_count":143,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch [10/100], Loss: 0.0000\n","Epoch [20/100], Loss: 0.0000\n","Epoch [30/100], Loss: 0.0000\n","Epoch [40/100], Loss: 0.0000\n","Epoch [50/100], Loss: 0.0000\n","Epoch [60/100], Loss: 0.0000\n","Epoch [70/100], Loss: 0.0000\n","Epoch [80/100], Loss: 0.0000\n","Epoch [90/100], Loss: 0.0000\n","Epoch [100/100], Loss: 0.0000\n","Test Accuracy: 0.9167\n"]}]},{"cell_type":"code","source":["result = (predicted==y_batch)\n","\n","accuracy = result.sum().item() / result.size(0)\n","print(result)\n","print(f'Accuracy: {accuracy:.4f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fenY3MXlBv1W","executionInfo":{"status":"ok","timestamp":1726829806823,"user_tz":-540,"elapsed":3,"user":{"displayName":"박희진","userId":"04727579243057026808"}},"outputId":"84a585b8-2aeb-45ac-fa97-02e6a26bf51d"},"execution_count":148,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([ True, False,  True, False,  True,  True,  True,  True,  True,  True,\n","         True,  True,  True,  True,  True,  True,  True,  True,  True, False,\n","         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,\n","         True,  True,  True,  True,  True,  True])\n","Accuracy: 0.9167\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"kSUe4seYB2W5"},"execution_count":null,"outputs":[]}]}